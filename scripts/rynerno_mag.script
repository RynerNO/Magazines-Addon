--[[
  Mags mod main file

--]

--[[
Copyright (C) 2020 RynerNO
-]]
--]]
-- Difficulty settings
local DEFAULT_DELAY = 800 -- delay between bullet loads, without decreasing by rank
local HIDE_AMMO_COUNT = true -- hide ammo count after reload if weapon fired once
local BULLETS_CHECK_DELAY = 1500



--

-- Colors

local clr_g  = utils_xml.get_color("d_green")
local clr_o  = utils_xml.get_color("d_orange")
local clr_r  = utils_xml.get_color("d_red")
local clr_y = utils_xml.get_color("yellow")

local clr_2  = utils_xml.get_color("ui_gray_1")

-----------
local helper = rynerno_helper
local ld = rynerno_loadout
local ld_ui = rynerno_loadout_ui
local released_ammo_table = {}
local player_skill = 1
local player_skill_max = 3
local exp_to_next_lvl = 2000
local exp_default_to_next_lvl =  2000

local exp_for_one_bullet = 5

local magazine_interaction = false

local gc = game.translate_string

local lastMode = 20
-- Variables for calculate dummy ammo weight
local dummy_ammo_section = "rn_dummy_weight_replacer"
local dummy_weight_item_id = nil
local dummy_total_weight = 0


local IGNORE_AMMO_SECTIONS = {
	[dummy_ammo_section] = true, 
	["rn_mag_wpn_mp5"] = true,
}
mags_data = {}
rn_weapon_data = {}
loadouts = {}

local temporary_removed_mags = {}
local hud_static = nil
function on_game_start()
	RegisterScriptCallback("on_key_press", on_key_press)
	RegisterScriptCallback("ActorMenu_on_item_drag_drop", on_item_drag_dropped)
	RegisterScriptCallback("actor_on_first_update", actor_on_first_update )
	RegisterScriptCallback("actor_on_weapon_fired", actor_on_weapon_fired)
	RegisterScriptCallback("ActorMenu_on_item_focus_receive", on_item_focus_receive)
	RegisterScriptCallback("ActorMenu_on_item_focus_lost", on_item_focus_lost)
	RegisterScriptCallback("ActorMenu_on_mode_changed", ActorMenu_on_mode_changed)
	RegisterScriptCallback("actor_item_to_ruck", actor_item_to_ruck)
	RegisterScriptCallback("actor_on_hud_animation_end", actor_on_hud_animation_end)
	RegisterScriptCallback("actor_on_item_take", actor_on_item_take)
	RegisterScriptCallback("actor_on_item_drop", actor_on_item_drop)
	RegisterScriptCallback("load_state",load_state)
	RegisterScriptCallback("save_state",save_state)
	
end

function updateHUD() 
	local weapon = db.actor:item_in_slot(db.actor:active_slot())
	if not (weapon and not IsMelee(weapon) and helper.isUseMag(weapon:section())) then return end
	local hud = get_hud()
	if(hud_static == nil) then
		hud:AddCustomStatic("ryner_mags_ammo",true)
		hud_static = hud:GetCustomStatic("ryner_mags_ammo")
	end
	local wnd = hud_static:wnd()
	local mag_data = rn_weapon_data[weapon:id()]
	if not (mag_data) then  
		wnd:TextControl():SetTextST(0 .. "%")
		wnd:TextControl():SetTextColor(GetARGB(255, 176, 0, 0))
		return
	end
	
	local ammo_count =mag_data.total_ammo
	local max_ammo_count = ini_sys:r_string_ex(mag_data.mag_type, "max_mag_size")
	local ammo_count_in_percents = ammo_count / max_ammo_count * 100
	local r = math.floor(176 - ammo_count_in_percents - ammo_count)
	local g = math.floor(30 + ammo_count_in_percents + ammo_count)
	local color = GetARGB(255, r, g, 0)
	if(HIDE_AMMO_COUNT and mag_data and mag_data.checked) then
		wnd:TextControl():SetTextST("?")
		wnd:TextControl():SetTextColor(GetARGB(255, 176, 0, 0))
	else
		wnd:TextControl():SetTextST(math.floor(ammo_count_in_percents) .. "%")
		wnd:TextControl():SetTextColor(color)
	end
end

function hideHUD() 
	if(hud_static == nil) then return end
	local wnd = hud_static:wnd()
	wnd:TextControl():SetTextST("")
end

-- Called from ui_item.script line 572
function build_desc_header(obj, sec, str)
	if(obj and rynerno_helper.isMagazine(obj:section())) then
		local ammoCountTitle = gc('mag_ammo_loaded_count')
		local mag_data = mags_data[obj:id()]
		str =  clr_y .. gc("st_mag_ld_capacity") .. clr_2.. ": " .. clr_g .. ld.get_required_mag_cap(obj:section()) .. clr_2
		if  ( not (mag_data) and rynerno_loadout_ui.get_gui_inst():IsShown()) then 
			local loadout_id = rynerno_loadout_ui.get_gui_inst().loadout
	

			if(loadout_id) then
				mag_data = loadouts[loadout_id] and loadouts[loadout_id][obj:id()]
			end
		end
		local ammo_count = (mag_data and mag_data.total_ammo) or 0
		local max_ammo_count = ini_sys:r_u32(obj:section(), "max_mag_size")
		-- If mag data checked then display only percents
		
		if(mag_data and mag_data.checked and HIDE_AMMO_COUNT) then
			local percents = ammo_count / max_ammo_count * 100
	
			local min = percents - (10 * percents / 100) - 1
			local max = percents + (10 * percents / 100)
			if(max > 100) then max = 100 end
			if(min < 0) then min = 0 end
			
			str = str .. " \\n \\n" .. ammoCountTitle .. ": " .. math.floor(min) .. "-" ..  math.floor(max) .."%" .." \\n" 
			if(mag_data) then
				local title = gc("mag_ammo_types_count")
				str = str .. " \\n" .. title .. ":" .. " \\n"
				for i=1,#mag_data.ammo_list do
					if(mag_data.ammo_list[i].count == 0) then return end
					local ammo_translate_str = ini_sys:r_string_ex(mag_data.ammo_list[i].type,"inv_name_short")
					local ammo_name = gc(ammo_translate_str)
					str = str .. " \\n" .. clr_o .. ammo_name .. clr_2 ..": ".. clr_r .. "?" .. clr_2 .. " \\n"
				end
			end	
		else
			str = str ..  " \\n \\n" .. ammoCountTitle .. ": " .. clr_g .. ammo_count  .. clr_2 .. " / " .. clr_g .. max_ammo_count .. clr_2 .. " \\n" 
			if(mag_data) then
				local title = gc("mag_ammo_types_count")
				str = str .. " \\n" .. title .. ":" .. " \\n"
				for i=1,#mag_data.ammo_list do
					if(mag_data.ammo_list[i].count == 0) then return end
					local ammo_translate_str = ini_sys:r_string_ex(mag_data.ammo_list[i].type,"inv_name_short")
					local ammo_name = gc(ammo_translate_str)
					local ammo_count = mag_data.ammo_list[i].count
					str = str .. " \\n" .. clr_o .. ammo_name .. clr_2 ..": ".. clr_g .. ammo_count .. clr_2 .. " \\n"
				end
			end	
		end
	
	end

	return str
	
end


function rn_reload(ammo_type)
		-- Checking if weapon is valid for using mags
		local weapon = db.actor:item_in_slot(db.actor:active_slot())
		if(not weapon) then
			helper.log('no wepon in hands')
			return
		end
		
		if(not helper.isUseMag(weapon:section())) then
			helper.log('this weapon is not valid for use mags')
			return
		end
		
		-- Check if there is valid mag for than weapon
		local loadout = db.actor:item_in_slot(7)
		if not (loadout and ld.isExists(loadout:id())) then return end
		local mag_types = helper.getMagTypes(weapon:section())
		local loadout_mags = loadouts[loadout:id()]
		local mag
		for k,v in pairs(loadout_mags) do
			if(helper.indexOf(mag_types, v.mag_type) ~= -1) then
				if(ammo_type) then
					local last_item = helper.last_item(v.ammo_list)
					if(last_item.type == ammo_type) then
						if not (mag) then mag = v end
						if(mag and mag.total_ammo > v.total_ammo) then mag = v end
					end
				elseif(not ammo_type) then
					if not (mag) then mag = v end
					if(mag and mag.total_ammo > v.total_ammo) then mag = v end
					
				end
				
			end
		end
		
		if (mag == nil) then return end

		-- Unload mag from weapon, before reload
		rn_unload_mag(weapon)
	
		rn_load_mag(weapon, mag)

		helper.log('RELOADING')
end


function rn_load_mag(weapon, mag) 
	if not (mag) then return end
	if(not weapon or IsMelee(weapon) or not IsWeapon(weapon)) then return end
	if (rn_weapon_data[weapon:id()] ~= nil) then return end
	local loadout = db.actor:item_in_slot(7)
	if ((mags_data[mag.id] and mags_data[mag.id].total_ammo ~= 0)) then 
			-- Add mag data to weapon data
			rn_weapon_data[weapon:id()] = mag
			-- Remove mag data from mags_data
			mags_data[mag.id] = nil
			-- Remove mag from inventory
	elseif (loadout and ld.getMag(loadout:id(), mag.id)) then
		rn_weapon_data[weapon:id()] = mag
		loadouts[loadout:id()][mag.id] = nil
		
	end
	-- Check weapon state, if 0 or 1 then play reload animation
	local state = weapon:get_state()
	helper.log('STATE WPN: ' .. state)
	local weapon_in_hands = db.actor:item_in_slot(db.actor:active_slot())
	-- I don't think there is need of double check
	local inventory = GetActorMenu()
	
	if((state == 0 or state == 1) and (weapon:id() == weapon_in_hands:id()) and not (inventory:IsShown())) then
		
		weapon:switch_state(7)
	else
		rn_update_weapon(weapon, false)
	end
end

function rn_unload_mag(weapon)
	if(not weapon) then return end

	if(not rn_weapon_data[weapon:id()]) then return end
	local loaded_mag_data = rn_weapon_data[weapon:id()]
	if(loaded_mag_data and loaded_mag_data.fired) then
		loaded_mag_data.checked = true
		loaded_mag_data.fired = nil
	end
	
	
	local obj = level.object_by_id(loaded_mag_data.id)


	
	if(obj) then
		local mag_weight = helper.calcMagWeight(loaded_mag_data)
    	obj:set_weight(mag_weight)
		helper.set_condition(obj, loaded_mag_data.total_ammo, ini_sys:r_u32(obj:section(), "max_mag_size"))
		rn_sort_inventory()
	end

	rn_weapon_data[weapon:id()] = nil
	weapon:unload_magazine(false)
	if(loaded_mag_data.total_ammo ~= 0 and lastMode == 1) then
		mags_data[loaded_mag_data.id] = loaded_mag_data
		return
	elseif(loaded_mag_data.total_ammo == 0 and lastMode == 1) then
		return
	end
	local loadout = db.actor:item_in_slot(7)
	if not (loadout) then
		db.actor:drop_item(obj)
		mags_data[loaded_mag_data.id] = loaded_mag_data
	end
	local avaliable_slots = ld.get_available_cap(loadout)
	local reg_slots = ld.get_required_mag_cap(loaded_mag_data.mag_type)
	avaliable_slots = avaliable_slots - reg_slots
	if(avaliable_slots <  0) then
		db.actor:drop_item(obj)
		mags_data[loaded_mag_data.id] = loaded_mag_data
	else
		loadouts[loadout:id()][loaded_mag_data.id] = loaded_mag_data
	end
end

function rn_check_bullets(mag)
	if not (mag and mags_data[mag:id()]) then return true end
	if(magazine_interaction) then return end
	if not (mags_data[mag:id()].checked) then return true end
	local last_anim_change = time_global()
	local checking_start = time_global()
	local last_condition = 0
	magazine_interaction = true
	helper.log('Checking mag')
	local function checking_animation()
		if not (magazine_interaction) then return true end
		last_condition = last_condition + 0.1
		if(last_condition >= 1) then 
			last_condition = 0
		end
		mag:set_condition(last_condition)
		last_anim_change = time_global()
		local diff = last_anim_change - checking_start
		if( diff >= BULLETS_CHECK_DELAY) then
			magazine_interaction = false
			mags_data[mag:id()].checked = false
			helper.set_condition(mag, mags_data[mag:id()].total_ammo, ini_sys:r_u32(mag:section(), "max_mag_size"))
			return true
		end
		-- level.add_call(function() 
		-- 	local difference = time_global() - last_anim_change
		-- 	return difference >= 300
		-- end, checking_animation)
		CreateTimeEvent(time_global(), "RnCheckingAnimation", 300 / 1000, checking_animation)
		return true
	end
	checking_animation()
end
-- used to update bullets count in weapon and in mag data
function rn_update_weapon(weapon, reload)
		-- Check if it is instanse of weapon
		if not (IsWeapon(weapon)) then return end 
		-- Check if weapon id is in weapon data
		if(rn_weapon_data[weapon:id()] == nil) then return end
		-- Get ammo type and bullets count
		local ammoSec = helper.last_item(rn_weapon_data[weapon:id()].ammo_list).type
		local ammoList = str_explode(ini_sys:r_string_ex(weapon:section(), "ammo_class"), ",")
		local ammoType
				for i=1,#ammoList do
					if (ammoList[i] == ammoSec) then
						ammoType = i-1
						break
					end
				end
		helper.log('AMMO TYPE: ' .. ammoType)

		local ammoCount = rn_weapon_data[weapon:id()].total_ammo
		-- Set ammo type and bullets count
		if(reload) then
			weapon:unload_magazine(false)
			weapon:set_ammo_type(ammoType)
			weapon:set_ammo_elapsed(ammoCount)
		end

		-- Used to set elapsed ammo, when weapon fired. 
		if(not reload) then
			weapon:unload_magazine(false)
			weapon:set_ammo_type(ammoType)
			-- To prevent bullets vaste, when weapon fired it removes extra bullet
			weapon:set_ammo_elapsed(ammoCount + 1)
		end
		updateHUD()
	
		
end


function LoadBulletsIntoMagazine(ammo, mag)
		if(magazine_interaction) then return end
		-- Check if ammo type is correct
		
		local mag_ammo_type = str_explode(ini_sys:r_string_ex(mag:section(), "ammo_class"), ",")
		if(helper.indexOf(mag_ammo_type, ammo:section()) == -1) then
			return
		end
		exp_add()
		-- Calculate based on user skill delay betwen bullet loading
		 local delay = DEFAULT_DELAY - (player_skill * 50)
		 local last_load_time = time_global()
		-- Set variable magazine_interaction to true for ability to stop loading from another function
		
		
		magazine_interaction = true
		

				local function add_bullet() 
						if(magazine_interaction == false) then return true end
						local mag_data = mags_data[mag:id()]
						local max_ammo = ini_sys:r_u32(mag:section(), "max_mag_size")
						local ammo_list = (mag_data and mag_data.ammo_list) or {}
						local total_ammo  = (mag_data and mag_data.total_ammo) or 0
						local checked  = (mag_data and mag_data.checked) or false
		

						-- Mag is full
						if(max_ammo == total_ammo) then
							magazine_interaction = false
							mag_data.checked = false
							mags_data[mag:id()] = mag_data
							helper.set_condition(mag, total_ammo, ini_sys:r_u32(mag:section(), "max_mag_size"))
							return true
						end
						-- Set magazine data, remove bullet from inventory an play load sound
						local last_item = helper.last_item(ammo_list)
						if(last_item ~= nil and last_item.type == ammo:section()) then
							last_item.count = last_item.count + 1
							ammo_list = helper.replace_last(ammo_list, last_item)
						else
							table.insert(ammo_list, {type=ammo:section(), count=1})
						end
						total_ammo = helper.getMagAmmoCount(ammo_list)
						mags_data[mag:id()] = {
							id = mag:id(),
							checked = checked,
							mag_type = mag:section(),
							total_ammo = total_ammo,
							ammo_list = ammo_list}
						local box_size = ini_sys:r_float_ex(ammo:section(), "box_size")
						local box_weight = ini_sys:r_float_ex(ammo:section(), "inv_weight")
						local bullet_weight = box_weight / box_size
						local weight = mag:weight() + bullet_weight
						mag:set_weight(weight)
						if(checked) then
							mag:set_condition(0.2)
						else
							helper.set_condition(mag, total_ammo, ini_sys:r_u32(mag:section(), "max_mag_size"))
						end
						local ammo_box_size = ammo:ammo_get_count()
						local new_box_size = ammo_box_size - 1
					
						xr_sound.set_sound_play(AC_ID,"load_bullet_into_magazine")
						if(new_box_size == 0) then
							-- Try to find another box of that ammo type
							magazine_interaction = false
							local new_box = helper.findAmmoBox(ammo:id(), ammo:section())
							alife_release_id(ammo:id())
							if(new_box and IsAmmo(new_box)) then 
								helper.log('Finded another ammo box')
								LoadBulletsIntoMagazine(new_box, mag)
							end
							return true
						else
							ammo:ammo_set_count(new_box_size)
						end
						-- Update Inv
						rn_sort_inventory()
						if(magazine_interaction) then
							-- level.add_call(function() 
							-- 	local difference = time_global() - last_load_time
								
							-- 	return difference >= delay
							-- end, add_bullet)

							-- Seems to be more clean way
							CreateTimeEvent(time_global(), "LoadBulletsIntoMagazine", delay / 1000, add_bullet)
							return true
						end
						
					
				end
				add_bullet()
			
			
						
					
end

function UnloadBulletsFromMagazine(mag) 
	if(magazine_interaction) then return true end
	-- Check if mag is valid and exists in mags_data
	if not (helper.isMagazine(mag:section()) and mags_data[mag:id()]) then return true end
	local delay = DEFAULT_DELAY - (player_skill * 50)
	magazine_interaction = true

	local ammo_box = nil
	local function unload_bullet()
		if(not magazine_interaction) then return true end
		local ammo_data = helper.last_item(mags_data[mag:id()].ammo_list)
		if(ammo_data == nil or mags_data[mag:id()].total_ammo == 0) then
			magazine_interaction = false
			-- Remove empty mag from mags_data
			mags_data[mag:id()] = nil
			return true
		end
	
	
	
		-- Add bullet to actor invetory and remove from count
		-- create ammo function is broken so better to add all ammo at once
		-- 
		if(not ammo_box) then
			db.actor:iterate_inventory(function(a, itm) 
				if(itm:section() == ammo_data.type) then
					ammo_box = itm
				end
			end, true)
			if not (ammo_box) then
				create_ammo(ammo_data.type, db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), AC_ID, 1)
			end
		end
		if(ammo_box) then
			local c  = ammo_box:ammo_get_count()
			ammo_box:ammo_set_count(c + 1)
		end
		ammo_data.count = ammo_data.count - 1 
		if(ammo_data.count == 0) then
			helper.log('COUNT 0')
			mags_data[mag:id()].ammo_list = helper.remove_last(mags_data[mag:id()].ammo_list)
			
		else
			mags_data[mag:id()].ammo_list = helper.replace_last(mags_data[mag:id()].ammo_list, ammo_data)
		end
		
		mags_data[mag:id()].total_ammo = helper.getMagAmmoCount(mags_data[mag:id()].ammo_list)
		local box_size = ini_sys:r_float_ex(ammo_data.type, "box_size")
		local box_weight = ini_sys:r_float_ex(ammo_data.type, "inv_weight")
		local bullet_weight = box_weight / box_size
		local weight = mag:weight() - bullet_weight
		mag:set_weight(weight)
		local checked  = (mags_data[mag:id()] and mags_data[mag:id()].checked) or false
		if(checked) then
			mag:set_condition(0.2)
			if(ammo_data.count == 0 and mags_data[mag:id()].total_ammo == 0) then
				mag:set_condition(0)
			end
		else
			helper.set_condition(mag, mags_data[mag:id()].total_ammo, ini_sys:r_u32(mag:section(), "max_mag_size"))
		end
		xr_sound.set_sound_play(AC_ID,"unload_bullet_from_magazine")
		-- Update Inv
		rn_sort_inventory()
		CreateTimeEvent(time_global(), "UnloadBulletsFromMagazine", delay / 1000, unload_bullet)


		
		return true

	end
	-- Start unloading from the end of ammo_list
	unload_bullet()
	helper.log("Unload finished")
end

function remove_ammo_pack(ammo)
	table.insert(released_ammo_table, {
		type = ammo:section(),
		count = ammo:ammo_get_count()
	})
	-- Calculate 1 bullet weight
	local box_size = ini_sys:r_float_ex(ammo:section(), "box_size")
	local box_weight = ini_sys:r_float_ex(ammo:section(), "inv_weight")
	local bullet_weight = box_weight / box_size
	-- Weight to add
	dummy_total_weight = dummy_total_weight + (bullet_weight * ammo:ammo_get_count())
	alife_release_id(ammo:id())
	rn_set_ammo_weight_after_remove()
end


function exp_add()
	if(player_skill == player_skill_max) then
		return
	end
	exp_to_next_lvl = exp_to_next_lvl - exp_for_one_bullet
	if(exp_to_next_lvl <= 0) then
		player_skill = player_skill + 1
		exp_to_next_lvl = exp_default_to_next_lvl * player_skill 
	end
end

-- AMMO WHEEL Called from item_weapon.script

function rn_ammo_wheel(wpn)
	local ammo_inv = {}
	local loadout = db.actor:item_in_slot(7)
	local mag_types = getMagTypes(wpn:section())

	if not (loadout and ld.isExists(loadout:id())) then return ammo_inv end
	for k,v in pairs(loadouts[loadout:id()]) do
		if(helper.indexOf(mag_types, v.type) ~= -1) then
			local last_ammo = helper.last_item(v.ammo_list)
			if(last_ammo.count <= 0) then return end

			ammo_inv[last_ammo.type] = (ammo_inv[last_ammo.type] or 0) + 1
			end
	end

	return ammo_inv
end






-- Function used to disable deffault reload


function rn_return_all_ammo()
	if(released_ammo_table[1] ~= nil) then
		for k,v in pairs(released_ammo_table) do
			create_ammo(v.type, db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), AC_ID, v.count)	
		
		end
		rn_unset_ammo_weight_after_remove()
		released_ammo_table = {}
		

		-- Without this ammo will not be sorted
		local time = time_global()
		level.add_call(function() 
			local difference = time_global() - time
			return difference >= 10
		end, rn_sort_inventory)
	end
end

function rn_sort_inventory()
	local inventory = GetActorMenu()
	if not (inventory:IsShown()) then return end
	inventory:IMode_ResetInventories()
end

function rn_remove_all_ammo() 
	if(dummy_weight_item_id == nil) then 
		alife_create_item(dummy_ammo_section, db.actor)
	end
	-- Search for ammo and remove
	db.actor:inventory_for_each(function (item)
				if(IGNORE_AMMO_SECTIONS[item:section()] ~= nil) then 
						helper.log(item:section())
				end
				if(IsAmmo(item) and IGNORE_AMMO_SECTIONS[item:section()] == nil) then 
				
					remove_ammo_pack(item)
				end
	end)
	helper.log('released_ammo ---------------------------')
end

function rn_unset_ammo_weight_after_remove()
	if not (dummy_weight_item_id) then return end

	alife_release_id(dummy_weight_item_id)

	dummy_weight_item_id = nil
	dummy_total_weight = 0
	
end
		
function rn_set_ammo_weight_after_remove() 

	if not (dummy_weight_item_id) then return end
	local dummy_obj = level.object_by_id(dummy_weight_item_id)
	if not (dummy_obj) then return end
	helper.log(dummy_total_weight)
	dummy_obj:set_weight(dummy_total_weight)
end

-- CALLBACKS

function on_item_focus_lost(item)
	if not (item and IsWeapon(item) and rn_weapon_data[item:id()]) then return end
	rn_update_weapon(item, true)
end
function on_item_focus_receive(item)
	-- Not show ulnoad button
	if not (item and IsWeapon(item) and rn_weapon_data[item:id()]) then return end
	item:unload_magazine(false)
	
end

--[[ 
args (obj, weapon, ammo_elapsed, grenade_elapsed, ammo_type, grenade_type)	
--]]
function actor_on_weapon_fired(obj, weapon)
	if (obj:id() ~= AC_ID) then return end
	-- Check if weapon is in mags_data
	if (rn_weapon_data[weapon:id()] == nil) then return end
	-- Decrease by 1 ammo_count in data or remove ammo type if it's 0
	if(rn_weapon_data[weapon:id()].total_ammo == 0) then
	
		return
	end
	
	local ammo_data = helper.last_item(rn_weapon_data[weapon:id()].ammo_list)
	ammo_data.count = ammo_data.count - 1

	if(ammo_data.count == 0 and helper.length(rn_weapon_data[weapon:id()].ammo_list) > 1) then
		ammo_data = nil
	end
	local new_ammo_list = helper.set_last(rn_weapon_data[weapon:id()].ammo_list, ammo_data)
	rn_weapon_data[weapon:id()].ammo_list = new_ammo_list
	rn_weapon_data[weapon:id()].total_ammo = helper.getMagAmmoCount(rn_weapon_data[weapon:id()].ammo_list) 
	rn_weapon_data[weapon:id()].fired = true
	-- Set weapon ammo type and ammo count
	rn_update_weapon(weapon)
end

function actor_on_hud_animation_end(item,section,motion,state,slot)
	-- Check if item is weapon
	if not (IsWeapon(item))	then return end
	-- Check for reload state
	-- state 1 - weapon in hands
	-- state 2 - weapon hide
	if(state == 2) then
		hideHUD()
	elseif(state == 1) then
		updateHUD()
	end
	helper.log("STATE: " .. state)
	if(state ~= 7) then return end
	-- Check if item can use mags
	item:switch_state(0)
	if(helper.isUseMag(item:section()) == false) then
		helper.log('this weapon is not valid for use mags')
		return
	end
	rn_update_weapon(item, true)
	helper.log('RELOADING FINISHED')

end
	
function actor_on_item_take(item)
	helper.log('ITEM TAKE:' .. item:section())
	if(IsAmmo(item) and IGNORE_AMMO_SECTIONS[item:section()] ~= true and lastMode == 0) then
		remove_ammo_pack(item)
	end
	if(IsOutfit(item)) then
		if(ld.isExists(item:id())) then
			
			for id,mag in pairs(loadouts[item:id()]) do
				if not (temporary_removed_mags[id]) then return end
				temporary_removed_mags[id] = nil
				local se_obj = alife_create_item(mag.mag_type, db.actor)
			
				
				mag.id = se_obj.id
				loadouts[item:id()][id] = nil
				loadouts[item:id()][se_obj.id] = mag
				
				CreateTimeEvent(se_obj.id, "return_removed_mag", 200 / 1000, function() 
					local g_obj = level.object_by_id(se_obj.id)
					helper.set_condition(g_obj, mag.total_ammo, ini_sys:r_u32(g_obj:section(), "max_mag_size"))
					return true
					
				end)
			end
		end
	end
end

function actor_item_to_ruck(item)
	if(item:section() == dummy_ammo_section) then
		helper.log('DUMMY WEIGHT ITEM ADDED')
		dummy_weight_item_id = item:id()
		rn_set_ammo_weight_after_remove()
		return
	end

	
	
end

local UI_t 
function on_key_press(key)
	magazine_interaction = false
	if(key == DIK_keys.DIK_LCONTROL) then
		local loadout = db.actor:item_in_slot(7)
		helper.log(ld.get_available_cap(loadout))
		local inventory = GetActorMenu()
		helper.print_table(temporary_removed_mags)
		if(inventory:IsShown()) then
			helper.log("true inventory")
		else
			helper.log("false inventory")
		end
		
	end
	if(key == DIK_keys.DIK_HOME) then
		local loadout = db.actor:item_in_slot(7)
		if(not loadout) then return end
		if(lastMode == 0 or lastMode == 20 or lastMode == 1) then  
			UI_t = ld_ui.get_loadout_ui(loadout)
		end
	end
	local bind = dik_to_bind(key)
	if (bind == key_bindings.kWPN_RELOAD) then
		rn_reload()
	end

end


function save_state(m_data)
	m_data.released_ammo_table = released_ammo_table
	m_data.player_skill = player_skill
	m_data.exp_to_next_lvl = exp_to_next_lvl
	m_data.mags_data = mags_data
	m_data.rn_weapon_data = rn_weapon_data 
	m_data.loadouts = loadouts
	m_data.temporary_removed_mags = temporary_removed_mags
end

function load_state(m_data)
	released_ammo_table = m_data.released_ammo_table or {}
	player_skill = m_data.player_skill or 1
	exp_to_next_lvl = m_data.exp_to_next_lvl
	mags_data = m_data.mags_data or {}
	rn_weapon_data = m_data.rn_weapon_data or {}
	loadouts = m_data.loadouts or {}
	temporary_removed_mags = m_data.temporary_removed_mags or {}
	if(exp_to_next_lvl == nil) then
		exp_to_next_lvl = exp_default_to_next_lvl * player_skill
	end

end

function actor_on_first_update()
	-- Remove all ammo for weapons to prevent default game reload

	helper.log('actor update')

	if(db.actor ~= nil) then
		rn_remove_all_ammo()
		updateHUD()
	end
	lastMode = 0
end


function ActorMenu_on_mode_changed(mode, last_mode) 

	lastMode = mode
	if(mode==0) then
		if(last_mode==1) then
			-- iventory closed
			rn_remove_all_ammo()
			updateHUD() 
			
		elseif(last_mode==2) then
			-- trade closed
			rn_remove_all_ammo()
			updateHUD() 
		elseif(last_mode==3) then
		-- upgrade closed
		rn_remove_all_ammo()
		updateHUD() 
		elseif(last_mode==4) then
		-- dead body search closed
		rn_remove_all_ammo()
		updateHUD() 
		end
	elseif(mode==1) then
		-- inventory opened
		rn_return_all_ammo()
		hideHUD()
		
	elseif(mode==2) then
		-- trade opened
		rn_return_all_ammo()
		hideHUD()
		
	elseif(mode==3) then
		-- upgrade opened
		rn_return_all_ammo()
		hideHUD()
		
	elseif(mode==4) then
		-- dead body search opened
		rn_return_all_ammo()
		hideHUD()
		
	elseif(mode==10) then
		-- dialog opened
		rn_return_all_ammo()  
		hideHUD()
		
	elseif(mode==11) then
		-- dialog closed
		rn_remove_all_ammo()
		updateHUD()
		
		
	end
end

function on_item_drag_dropped(drag, drop, from_slot, to_slot)
	if (from_slot ~= EDDListType.iActorBag) then
		return
	end
	if(to_slot == EDDListType.iActorBag) then
	if(IsAmmo(drag) and helper.isMagazine(drop:section())) then
		
		LoadBulletsIntoMagazine(drag, drop)
	elseif(drop and IsWeapon(drop) and helper.isUseMag(drop:section())) then
		if(not helper.isMagazine(drag:section())) then return end
		if(not mags_data[drag:id()]) then return end
		rn_load_mag(drop, mags_data[drag:id()])
	 
	 end
	end
	if(to_slot == EDDListType.iActorSlot) then
		if(not helper.isMagazine(drag:section())) then return end
		if(drop and IsWeapon(drop) and helper.isUseMag(drop:section())) then
			if(not mags_data[drag:id()]) then return end
			rn_load_mag(drop, mags_data[drag:id()])
		
		end
	end
end

function actor_on_item_drop(obj)

	if(IsOutfit(obj)) then
		if(ld.isExists(obj:id())) then
			for id,mag in pairs(loadouts[obj:id()]) do
				temporary_removed_mags[id] = true
				alife_release_id(id)
			end
		end
	end
	if(helper.isMagazine(obj:section()) and (not temporary_removed_mags[obj:id()])) then
		for k,v in pairs(rn_weapon_data) do
			-- It should be not possible.
			if(v.id == obj:id()) then
				alife_release_id(obj:id())
				helper.log('MAG CREATED')
				local se_obj = alife_create_item(obj:section(), db.actor)
				if not (se_obj) then return end
				local mag = rn_weapon_data[k]
				mag.id = se_obj.id
				rn_weapon_data[k] = mag
				CreateTimeEvent(se_obj.id, "return_removed_mag", 200/ 1000, function() 
					local g_obj = level.object_by_id(se_obj.id)
					helper.log(g_obj:section())
					helper.set_condition(g_obj, mag.total_ammo, ini_sys:r_u32(g_obj:section(), "max_mag_size"))
					return true
				end)
				
				return
			end

			
			
		end
		-- When dropped item that already in loadout, also should be not possible
		for k,v in pairs(loadouts) do
			for id,mag in pairs(v) do
				if(id == obj:id()) then
					alife_release_id(id)
					helper.log('MAG CREATED x2')
					local se_obj = alife_create_item(obj:section(), db.actor)
					if not (se_obj) then return end
					
					mag.id = se_obj.id
					loadouts[k][se_obj.id] = mag
					loadouts[k][id] = nil
			
					
					CreateTimeEvent(se_obj.id, "return_removed_mag", 200 / 1000, function() 
						local g_obj = level.object_by_id(se_obj.id)
						helper.log('time event')
						helper.log(g_obj:section())
						helper.set_condition(g_obj, mag.total_ammo, ini_sys:r_u32(g_obj:section(), "max_mag_size"))
						return true
					end)
					return
				end
			end
		end
	end
end


