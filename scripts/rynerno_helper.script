--[[
  Helper functions for mags

--]

--[[
Copyright (C) 2020 RynerNO
This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License-]]
--]]
local DEBUG = 1

local MAG_TYPE_S = "rn_mags"

function log(text)
	if(DEBUG ~= 1) then return end
	if(type(text) == "string" or type(text) == "number") then
		printf(text)
	elseif (type(text) == "boolean") then
		if(text == true) then
			printf("True")
		else
			printf("False")
		end
	elseif(type(text) == "table") then
		print_table(text)
  	end


end

function isUseMag(sec) 
	if(length(getMagTypes(sec)) == 0) then return false end
	return true
end

function isMagazine(sec)

	return ini_sys:r_bool_ex(sec,"is_mag", false)

end
-- Return index of first entry for given object
function indexOf( t, object)
	if "table" == type( t ) then
			for i = 1, #t do
					if object == t[i] then
							return i
					end
			end
			return -1
	else
					error("table.indexOf expects table for first argument, " .. type(t) .. " given")
	end
end

-- Return number of items in the table
function length(t)
	if(type(t) ~= "table") then
		return 0
	end
	return #t
end
-- Reverse the table
function reverse(t)
	if(type(t) ~= "table") then
		return {}
	end
	local t_length = length(t)
	local i = 1
	local new_table = {}
	while t_length ~= 0 do
		new_table[i] = t[t_length]
		i = i + 1
		t_length = t_length - 1
	end
	return new_table
end
-- last item of the table
function last_item(t)
	if(type(t) ~= "table") then
		return nil
	end
	local len = length(t)
	return t[len]
end

-- Replace last item in the array
function replace_last(t, new)
	if(type(t) ~= "table") then
		return {}
	end
	local new_table = {}
	local len = length(t)
	new_table = t
	new_table[len] = new
	return new_table
end


-- Iterate table while not find mag entry

function getMagAmmoCount(ammo_list)
	local count = 0
	if(type(ammo_list) == "table") then
		for k,v in pairs(ammo_list) do
			if(v and v.count ~= 0) then
				count = count + v.count
			end
		end
	end
	return count
end

function set_condition(item, current, max)
	local cur = current or 0
	local percent_load = cur / max
	item:set_condition(percent_load)

end

-- 
function remove_last(t)
	if(type(t) ~= "table") then
		log('Expected table')
		return {}
	end
	local len = length(t)
	t[len] = nil
	return t
end

function set_last(t, v)
	if(type(t) ~= "table") then
		log('Expected table')
		return {}
	end
	local len = length(t)
	t[len] = v
	return t

end

-- Print table from _g script

function print_table(table, subs)
	if(DEBUG == 0) then return end
	local sub
	if subs ~= nil then
		sub = subs
	else
		sub = ""
	end
	for k,v in pairs(table) do
		if type(v) == "table" then
			print_table(v, sub.."["..k.."]----->")
		elseif type(v) == "function" then
			printf(sub.."%s = function",k)
		elseif type(v) == "userdata" then
			if (v.x) then
				printf(sub.."%s = %s",k,utils_data.vector_to_string(v))
			else
				printf(sub.."%s = userdata", k)
			end
		elseif type(v) == "boolean" then
					if v == true then
							if(type(k)~="userdata") then
									printf(sub.."%s = true",k)
							else
									printf(sub.."userdata = true")
							end
					else
							if(type(k)~="userdata") then
									printf(sub.."%s = false", k)
							else
									printf(sub.."userdata = false")
							end
					end
		else
			if v ~= nil then
				printf(sub.."%s = %s", k,v)
			else
				printf(sub.."%s = nil", k,v)
			end
		end
	end
	
end


function starts_with(str, start)
	return str:sub(1, #start) == start
end


function getMagTypes(sec)
	local short_name = str_explode(sec, "_")
	if not (short_name[1] and short_name[2]) then return end
 	short_name = short_name[1] .."_" .. short_name[2]
	local mag_types = ini_sys:r_string_ex(MAG_TYPE_S, short_name)
	if(mag_types) then 
		mag_types = str_explode(mag_types, ",") 
	else 
		mag_types = {}
	end
	return mag_types
end


function findAmmoBox(id, sec)
	if not (sec) then return end
	local new_ammo_box = nil
	local function itr(a, item)
		if(item and IsAmmo(item) and item:section() == sec and item:id() ~= id) then
			new_ammo_box = item

		end
	end
	db.actor:iterate_inventory(itr, true)
	return new_ammo_box
end


function calcMagWeight(magData)
	local weight = ini_sys:r_float_ex(magData.mag_type, "inv_weight")
	for k,v in pairs(magData.ammo_list) do

		local box_size = ini_sys:r_float_ex(v.type, "box_size")
		local box_weight = ini_sys:r_float_ex(v.type, "inv_weight")
		local bullet_weight = box_weight / box_size
		weight = weight + bullet_weight * v.count
	end
	return weight
end