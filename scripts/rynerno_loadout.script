--[[
  Mags mod loadout

--]

--[[
Copyright (C) 2020 RynerNO
-]]
--]]
local DEFFAULT_LOADOUT_CAP = 2 -- max mags in loadout without outfit
local LOADOUTS_SECTION = "rn_loadouts"
-- Functions to add - remove mags from loadout
local loadout_capacity_levels = {small = 4, medium = 6, large = 8}
local cache_loadout_cap = {}
local cache_mag_cap = {}
local h = rynerno_helper
function add_mag(loadout, mag)
  if not (loadout and h.isMagazine(mag:section())) then return end
  local mag_required_cap = get_required_mag_cap(mag:section())
  local avaliable_cap = get_available_cap(loadout)
  if(mag_required_cap > avaliable_cap) then return end
  local mag_data = rynerno_mag.mags_data[mag:id()]
  rynerno_mag.loadouts[loadout:id()][mag:id()] = mag_data
 
end


function remove_mag(loadout, mag)
  if not (loadout and h.isMagazine(mag:section())) then return end
  
  rynerno_mag.loadouts[loadout:id()][mag:id()] = nil
 
end

function transfer_to_inv(mag)
  h.log('tranfer_to_inv')
  local loadout = db.actor:item_in_slot(7)
  if(loadout and mag and isExists(loadout:id())) then
    local id = loadout:id()
    local weight = loadout:weight()
    local mag_w = mag:weight()
    weight = weight - mag_w
    loadout:set_weight(weight)
    rynerno_mag.mags_data[mag:id()] = rynerno_mag.loadouts[id][mag:id()] 
    rynerno_mag.loadouts[id][mag:id()]  = nil
    local l_gui = rynerno_loadout_ui.get_gui_inst()
    if(l_gui and l_gui:IsShown()) then l_gui:Reset() end
  end
end

function transfer_from_inv(mag)
  h.log('tranfer_from_inv')
  local loadout = db.actor:item_in_slot(7)
  if(loadout and mag) then
    if not (rynerno_mag.mags_data[mag:id()]) then return end
    local id = loadout:id()
    local weight = loadout:weight()
    local mag_w = mag:weight()
    weight = weight + mag_w
    loadout:set_weight(weight)
    if not(isExists(id)) then 
      rynerno_mag.loadouts[id] = {}
    end
    rynerno_mag.loadouts[id][mag:id()] = rynerno_mag.mags_data[mag:id()]
    rynerno_mag.mags_data[mag:id()] = nil
    local l_gui = rynerno_loadout_ui.get_gui_inst()
    if(l_gui and l_gui:IsShown()) then l_gui:Reset() end
  end
end

-- Function to get max slots in loadout
function get_required_mag_cap(sec)
  return cache_mag_cap[sec] or ini_sys:r_float_ex(sec, "req_cap") or 1
end
function get_available_cap(obj)
  local avaliable_cap = get_loadout_capacity(obj:section()) 
  if (isExists(obj:id())) then
    for k,v in pairs(rynerno_mag.loadouts[obj:id()]) do
      avaliable_cap = avaliable_cap - get_required_mag_cap(v.mag_type)
    end
  end
  return avaliable_cap
end
function get_loadout_capacity(sec) 
  if(cache_loadout_cap[sec]) then
    return cache_loadout_cap[sec]
  end

  -- Check common levels
  for k,v in pairs(loadout_capacity_levels) do
    local loadouts_list = str_explode(ini_sys:r_string_ex(LOADOUTS_SECTION, k), ",")
    local idx = h.indexOf(loadouts_list, sec)
    if(idx ~= -1) then
      cache_loadout_cap[sec]  = v
      return v
    end

  end
  -- Check individual
    local loadouts_idividual_list = str_explode(ini_sys:r_string_ex(LOADOUTS_SECTION, "individual"), ",")
    if(h.indexOf(loadouts_idividual_list) ~= -1) then
      local loadout_cap = ini_sys:r_float_ex("rn_loadout_" .. sec, "capacity")
      cache_loadout_cap[sec]  = loadout_cap
      return loadout_cap
    end

  cache_loadout_cap[sec]  = DEFFAULT_LOADOUT_CAP
  return DEFFAULT_LOADOUT_CAP
end

function isExists(id) 
  if(rynerno_mag.loadouts[id]) then return true end
  return false
end


-- Loadout GUI

function getMagsTable(id)
  local t = {}
  local mags_list = rynerno_mag.loadouts[id] or {}
	for k,v in pairs(mags_list) do
		local obj = level.object_by_id(k)
		t[#t + 1] = obj
	end
	return t
end